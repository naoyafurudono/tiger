structure A = Absyn
type symbol = Symbol.symbol
val symbol = Symbol.symbol
type pos = int
%%

%term
    EOF
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY  | IF  | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 
  | UMINUS

%nonterm  
    decs of A.dec list 
  | dec of A.dec 
  | fundecs of A.fundec list 
  | tydecs of A.tydec list
  | tydec of A.tydec
  | vardec of A.vardec
  | fundec of A.fundec
  | ty of A.ty 
  | ty_fields of A.field list
  | lvalue of A.var
  | lvalue_not_ID of A.var
  | id_eq_exps of (A.symbol * A.exp * A.pos) list
  | exps of A.exp list
  | exp of A.exp 
  | program of A.exp


%pos pos
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%left SEMICOLON
%left OR
%left AND
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%nonassoc RBRACK
%nonassoc ELSE DO OF ASSIGN
%%

program	: exp				(exp)
exp : lvalue                             (A.VarExp lvalue)
    | NIL                                (A.NilExp)
    | exp SEMICOLON exp              (A.SeqExp (exp1, exp2, SEMICOLONleft))
    | LPAREN RPAREN                      (A.NilExp)
    | INT                                (A.IntExp(INT))
    | STRING                             (A.StringExp(STRING, STRINGleft))
    | MINUS exp      %prec UMINUS        (A.OpExp {left = A.IntExp(0), oper = A.MinusOp, right = exp, pos = MINUSleft})
                (* Call *)
                     | ID LPAREN exps RPAREN              (A.CallExp {func = symbol ID, args = exps, pos = IDleft})
                (* Array Decl *)
                     | ID LBRACK exp RBRACK OF exp        (A.ArrayExp{typ = symbol ID, size = exp1, init = exp2, pos = IDleft})
                (* Record Decl*)
                     | ID LBRACE id_eq_exps RBRACE        (A.RecordExp{typ = symbol ID, fields = id_eq_exps, pos = IDleft})
                     | exp PLUS exp                       (A.OpExp {left = exp1, oper = A.PlusOp, right = exp2, pos = PLUSleft})
                     | exp MINUS  exp                     (A.OpExp {left = exp1, oper = A.MinusOp, right = exp2, pos = MINUSleft})
                     | exp TIMES exp                      (A.OpExp {left = exp1, oper = A.TimesOp, right = exp2, pos = TIMESleft})
                     | exp DIVIDE exp                     (A.OpExp {left = exp1, oper = A.DivideOp, right = exp2, pos = DIVIDEleft})
                     | exp EQ exp                         (A.OpExp {left = exp1, oper = A.EqOp, right = exp2, pos = EQleft})
                     | exp NEQ exp                        (A.OpExp {left = exp1, oper = A.NeqOp, right = exp2, pos = NEQleft})
                     | exp LT exp                         (A.OpExp {left = exp1, oper = A.LtOp, right = exp2, pos = LTleft})
                     | exp LE exp                         (A.OpExp {left = exp1, oper = A.LeOp, right = exp2, pos = LEleft})
                     | exp GT exp                         (A.OpExp {left = exp1, oper = A.GtOp, right = exp2, pos = GTleft})
                     | exp GE exp                         (A.OpExp {left = exp1, oper = A.GeOp, right = exp2, pos = GEleft})
                     | exp AND exp                        (A.IfExp {test = exp1, then' = exp2, else' = SOME (A.IntExp 1), pos = ANDleft})
                     | exp OR exp                         (A.IfExp {test = exp1, then' = A.IntExp 1, else' = SOME exp2, pos = ORleft})
                     | lvalue ASSIGN exp                  (A.AssignExp{var = lvalue, exp = exp, pos = ASSIGNleft})
                     | IF exp THEN exp ELSE exp           (A.IfExp{test = exp1, then' = exp2, else' = SOME exp3, pos = IFleft})
                     | IF exp THEN exp                    (A.IfExp{test = exp1, then' = exp2, else' = NONE, pos = IFleft})
                     | WHILE exp DO exp                   (A.WhileExp{test = exp1, body = exp2, pos = WHILEleft})
                     | FOR ID ASSIGN exp TO exp DO exp    (A.ForExp{var = symbol ID, escape = ref false, lo = exp1, hi = exp2, body = exp3, pos = FORleft}) (* TODO escape のことを完全に理解する。今は勘でfalseにしている。 *)
                     | BREAK                              (A.BreakExp(BREAKleft))
                     | LET decs IN exp END             (A.LetExp{decs = decs, body = exp, pos = LETleft})
                     | LPAREN exp RPAREN                  (exp)
exps :  exp COMMA exps                   (exp :: exps)
     | exp                               ([exp])
     | (* empty *)                       ([])
id_eq_exps : ID EQ exp COMMA id_eq_exps  ((symbol ID, exp, COMMAleft) :: id_eq_exps)
           | ID EQ exp                         ([(symbol ID, exp, IDleft)])
           | (* empty *)                       ([]) 
lvalue : ID                              (A.SimpleVar (symbol ID, IDleft))
       | lvalue DOT ID                   (A.FieldVar (lvalue, symbol ID, DOTleft))
       | lvalue LBRACK exp RBRACK        (A.SubscriptVar (lvalue, exp, LBRACKleft))
       | ID LBRACK exp RBRACK            (A.SubscriptVar (A.SimpleVar(symbol ID, IDleft), exp, LBRACKleft))
decs : dec decs                          (dec :: decs)
     | dec                               ([dec])
dec : tydecs                             (A.TypeDec tydecs)
    | vardec                             (A.VarDec vardec)        (* vardecsは不要。変数は相互再帰な参照ではない。 *)
    | fundecs                            (A.FunctionDec fundecs)
tydecs : tydec tydecs                    (tydec :: tydecs)
       | tydec                           ([tydec])
fundecs : fundec fundecs                 (fundec :: fundecs)
        | fundec                         ([fundec])
vardec : VAR ID ASSIGN exp               ({name = symbol ID, escape = ref false, typ = NONE, init = exp, pos = VARleft})
       | VAR ID COLON ID ASSIGN exp     ({name = symbol ID1, escape = ref false, typ = SOME (symbol ID2, ID2left), init = exp, pos = VARleft})
tydec : TYPE ID EQ ty                    ({name = symbol ID, ty = ty, pos = TYPEleft})
ty    : ID                               (A.NameTy(symbol ID, IDleft))
      | LBRACE ty_fields RBRACE          (A.RecordTy ty_fields)
      | ARRAY OF ID                      (A.ArrayTy (symbol ID, ARRAYleft))
ty_fields : ID COLON ID COMMA ty_fields  ({name = symbol ID1, escape = ref false, typ = symbol ID2, pos = ID1left} :: ty_fields)
          | ID COLON ID                  ([{name = symbol ID1, escape = ref false, typ = symbol ID2, pos = ID1left}])
          | (* empty *)                  ([])
fundec : FUNCTION ID LPAREN ty_fields RPAREN EQ exp            ({name = symbol ID, params = ty_fields, result = NONE, body = exp, pos = FUNCTIONleft})
       | FUNCTION ID LPAREN ty_fields RPAREN COLON ID EQ exp   ({name = symbol ID1, params = ty_fields, result = SOME (symbol ID2, ID2left), body = exp, pos = FUNCTIONleft})
                  
